#!/bin/sh

##  Copyright (c) 2012, Dayneko Roman <me@h0.org.ua>
##  All rights reserved.
##  
##  Redistribution and use in source and binary forms, with or without
##  modification, are permitted provided that the following conditions are met:
##      * Redistributions of source code must retain the above copyright
##        notice, this list of conditions and the following disclaimer.
##      * Redistributions in binary form must reproduce the above copyright
##        notice, this list of conditions and the following disclaimer in the
##        documentation and/or other materials provided with the distribution.
##      * Neither the name of the <organization> nor the
##        names of its contributors may be used to endorse or promote products
##        derived from this software without specific prior written permission.
##  
##  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
##  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
##  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
##  DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
##  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
##  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
##  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
##  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
##  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
##  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#set -x

##### LEGEND #########
# ## MUST
# $last == action {start|stop|attach|console}
# -n node
# -A app name
# -P erlang -pa opt
# -u username
# ## MAY
# -C config
# -c cookie
# -N use name instead of sname
# -o erlang option
# -s extra start app
# -l log base dir
# -H use erlang heart
#### INTERNAL #####

PATH=/bin:/sbin:/usr/bin:/usr/sbin:$PATH

erl=$(which erl)
su=$(which su)
echo=$(which echo)

[ -z "${echo}" ] && echo=echo

errexit() {
    ${echo} "+ERR: $1"
    exit 1
}

delim() {
    if [ -n "$3" ]; then
        OLDFS=${FS}
        FS=$3
    fi
	
    for i in $(echo "$2"); do
        ${echo} -n "$1$i"
    done

    if [ -n "${OLDFS}" ]; then 
        FS=${OLDFS}
    fi
}

legend() {
    ${echo} "
  -h                    print this screen

  ## MUST options
   
  \$last_arg == action {start|stop|attach|console}
   
  -n [node@name]        node
  -A [appname]          app name
  -P [path1 ... pathN]  erlang -pa path, separate ';' 
  -u [system user]      username
   
  ## MAY options
  -C [path]             path to config file
  -c [cookie]          node cookie
  -N                    use name instead of sname
  -o [erl opt]          erl extra options
  -s [app1 ... appN]    extra app, separate ';'
  -l [path]             log base dir
  -H                    use erlang heartbit
  -d [path]             change dir
"
    return 0
}

nameopt="-sname"
startopt="-detached"
stopopt="-noshell"
pingopt="-noshell -noinput"
consoleopt=""
attachopt=""
tmpargsdir="/var/tmp/erlargs"

getoptargs="a:n:c:NA:P:o:s:u:C:hl:Hd:"

while getopts "$getoptargs" arg
do
    case "$arg" in
        n) node="$OPTARG";;
        c) cookie="$OPTARG";;
        N) nameopt="-name";;
        A) appname="$OPTARG";;
        P) patha="$OPTARG";;
        o) erlopt="$OPTARG";;
        s) extrastart="$OPTARG";;
        u) user="$OPTARG";;
        C) config="$OPTARG";;
        l) logbase="$OPTARG";;
        H) heartopt="-heart";;
        d) workdir="$OPTARG";;
        h) legend; exit 0;;
        *) ${echo} "++ERR: -$arg unknow\n\n"; legend; exit 1;;
	esac
done

shift $((OPTIND-1))
action="$1"

realuser=$(whoami)

# chk param

[ -z "$action" ] && errexit "action not set!"

if [ "$action" != attach ]; then 
    [ -z "$user" ] && errexit "user not set! run application from root user denied"
    [ "${realuser}" != "root" -a "${user}" != ${realuser} ] && errexit "cant su from non-priv user!" 
fi

if [ "$action" = start -o "$action" = console ]; then 
    [ -z "$appname" ] && errexit "appname not set!"
    [ -z "$patha" ] && errexit "patha not set!"
fi

[ -z "$erl" ] &&  errexit "erl not found!"
[ -z "$su" ] && errexit "WTF?!? where is su?"

$(${echo} ${node} | grep "@" >/dev/null 2>&1) || errexit "set full node name!"

[ -n "$cookie" ] && cookieopt="-setcookie $cookie"
[ -n "$config" ] && configopt="-config $config"

[ -z "$logbase" ] && logbase="/var/log/${appname}"

applog="${logbase}/${appname}.log"
appsasllog="${logbase}/${appname}-sasl.log"

loggingopt="-sasl errlog_type error -kernel error_logger '{file,\"${applog}\"}' -sasl sasl_error_logger '{file,\"${appsasllog}\"}'"

if [ "${realuser}" != "${user}" ]; then
    if [ "$(uname)" = "Darwin" ]; then  
        runcmd="${su} ${user} -c" # IF runcmd == su - $user THEN erlang app crach with {error, nxndomain} 
    else
        runcmd="${su} - ${user} -c"
    fi
else 
    runcmd=eval
fi

mkdir -p ${tmpargsdir}

ping_node() {
    ${runcmd} \
	    "ERL_CRASH_DUMP=/dev/null ${erl} ${nameopt} ping ${pingopt} ${cookieopt} -eval 'pong = net_adm:ping(${node}).' -s init stop" >/dev/null 2>&1 
}

start() {
    if ping_node; then
        errexit "node '${node}'already running!"
    fi

    [ -f "${applog}" ] && mv ${applog} ${applog}.1
    [ -f "${appsasllog}" ] && mv ${appsasllog} ${appsasllog}.1

    local argfile="${tmpargsdir}/${node}"

    rm -f ${argfile}
    touch ${argfile} 
    chown ${user} ${argfile}

    cat > ${argfile} << _EOF
${heartopt}
-boot start_sasl
${nameopt} ${node}
$(delim " -pa " "${patha}")
${startopt}
${cookieopt}
${configopt}
${loggingopt}
-s ${appname}
$(delim " -s " "$extrastart")
_EOF

    if [ -n "${heartopt}" ]; then
        ${runcmd} "HEART_COMMAND='${erl} -args_file ${argfile}' ${erl} -args_file ${argfile}"
    else
        ${runcmd} "${erl} -args_file ${argfile}"
    fi
}

stop() {
#    local paargs=$(delim " -pa " "${patha}")
    ${runcmd} "${erl} ${nameopt} stop-${node} ${paargs} ${stopopt} ${cookieopt} -eval 'rpc:call(${node}, init, stop, []).' -s init stop"
}

attach() {
    ${erl} ${nameopt} attach-${node} ${cookieopt} ${attachopt} -remsh ${node}
}

console() {
    local paargs=$(delim " -pa " "${patha}")
    local extraargs=$(delim " -s " "$extrastart")

    if ping_node; then
        errexit "node '${node}'already running!"
    fi

    [ -f "${applog}" ] && mv ${applog} ${applog}.1
    [ -f "${appsasllog}" ] && mv ${appsasllog} ${appsasllog}.1

    ${runcmd} "${erl} -boot start_sasl ${nameopt} ${node} ${paargs} ${consoleopt} ${cookieopt} ${configopt} ${loggingopt} -s ${appname} ${extraargs}"
}

$action

exit $?

